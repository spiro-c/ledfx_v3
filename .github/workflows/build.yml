name: Build Binaries

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  GHCR_SLUG: ghcr.io/ledfx/ledfx_v3
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build_win:
    name: Build Windows x64 Binary
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Set up Build Environment 
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: |
            git
            make
            unzip
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-go
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-portaudio
    - name: Get aubio
      run: |
        export CYGPATH=$(cygpath -m /)
        curl -o aubio.zip https://www.ledfx.app/downloads/aubio-0.5.0-alpha-win64.zip
        unzip aubio.zip
        mv aubio-0.5.0-alpha-win64/lib/pkgconfig/aubio.pc $CYGPATH/mingw64/lib/pkgconfig/aubio.pc
        rmdir aubio-0.5.0-alpha-win64/lib/pkgconfig/
        mv aubio-0.5.0-alpha-win64/lib/* $CYGPATH/mingw64/lib/
        mv aubio-0.5.0-alpha-win64/bin/* $CYGPATH/mingw64/bin/
        mv aubio-0.5.0-alpha-win64/include/* $CYGPATH/mingw64/include/
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build LedFx
      run: |
         go build -o 'LedFx.exe' -v
    - name: Package LedFx
      run: |
         export CYGPATH=$(cygpath -m /)
         mkdir LedFx_Builds/
         mv LedFx.exe LedFx_Builds/
         cp $CYGPATH/mingw64/bin/libaubio-5.dll LedFx_Builds/
         cp $CYGPATH/mingw64/bin/libportaudio.dll LedFx_Builds/   
    - name: Upload LedFx Artifact
      uses: actions/upload-artifact@v3
      with:
        name: LedFx-windows-amd64-${{ github.sha }}
        path: LedFx_Builds/

  build_macos:
    name: Build macos Binaries
    runs-on: macos-latest
    strategy:
      matrix:
        version: ['darwin-amd64', 'darwin-arm64']
        include:
          - version: darwin-amd64
            OS: darwin
            ARCH: amd64
          - version: darwin-arm64
            OS: darwin
            ARCH: arm64
    steps:
    - name: Set up Go 1.18
      uses: actions/setup-go@v3
      id: go
      with:
        go-version: 1.18
        
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Get Build Matrix Info and Set Variables
      run: |
        CGO_ENABLED=1
        GOOS=${{ matrix.OS }}
        GOARCH=${{ matrix.ARCH }}
        BINARY_NAME=LedFx-${{ matrix.OS }}-${{ matrix.ARCH }}
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
        echo "GOOS=$GOOS" >> $GITHUB_ENV
        echo "GOARCH=$GOARCH" >> $GITHUB_ENV
    - name: Install dependencies
      shell: bash {0}
      run: |
        if [ ${{ matrix.ARCH }} = "arm64" ]; then
          mkdir -p $HOME/arm-target/bin
          mkdir -p $HOME/arm-target/brew-cache
          echo $PWD
          export PATH="$HOME/arm-target/bin:$PATH"

          cd $HOME/arm-target
          mkdir arm-homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C arm-homebrew
          ln -s $HOME/arm-target/arm-homebrew/bin/brew $HOME/arm-target/bin/arm-brew

          export HOMEBREW_CACHE=$HOME/arm-target/brew-cache
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          arm-brew fetch --deps --bottle-tag=arm64_big_sur aubio portaudio libtool |\
            grep -E "(Downloaded to:|Already downloaded:)" |\
            grep -v pkg-config |\
            awk '{ print $3 }' |\
            xargs -n 1 arm-brew install --ignore-dependencies --force-bottle

          # Install host version of pkg-config so we can call it in the build system
          arm-brew install pkg-config
          ln -s $HOME/arm-target/arm-homebrew/bin/pkg-config $HOME/arm-target/bin/arm-pkg-config
        else
          brew install pkg-config
          brew install portaudio
          brew install aubio
        fi
    - name: Build
      run: |
        if [ ${{ matrix.ARCH }} = "arm64" ]; then
          export PKG_CONFIG_PATH=/Users/runner/arm-target/lib/pkgconfig:$PKG_CONFIG_PATH
          export AUBIO_PATH=/Users/runner/arm-target/Cellar/aubio/0.4.9_3/
          export PATH=/System/Volumes/Data/Users/runner/go/bin:$PATH
          CGO_CFLAGS="-I$AUBIO_PATH/include" CGO_LDFLAGS="-L$AUBIO_PATH/lib" CGO_ENABLED=1 GOOS=${{ matrix.OS }} GOARCH=${{ matrix.ARCH }} go build -tags dynamic -o "$BINARY_NAME" -v -ldflags="-s -w"
        else
          export PATH=/System/Volumes/Data/Users/runner/go/bin:$PATH
          CGO_ENABLED=1 GOOS=${{ matrix.OS }} GOARCH=${{ matrix.ARCH }} go build -tags dynamic -o "$BINARY_NAME" -v -ldflags="-s -w"
        fi
      # Permission Loss https://github.com/actions/upload-artifact#permission-loss  
    - name: Tar artifacts
      run: tar -cvf ${{ env.BINARY_NAME }}-${{ github.sha }}.tar ${{ env.BINARY_NAME }} 

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-${{ github.sha }}.tar
        path: ${{ env.BINARY_NAME }}-${{ github.sha }}.tar


  prepare_linux:
    name: Prepare linux env
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.ledfx-cache
          key: ${{ runner.os }}-ledfx-base-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ledfx-base-
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build base (cache only)
        uses: docker/bake-action@v2
        with:
          targets: base
          set: |
            *.platform=${{ env.PLATFORMS }}
            *.cache-from=type=local,src=/tmp/.ledfx-cache
            *.cache-to=type=local,dest=/tmp/.ledfx-cache-new,mode=max
      -
        # FIXME: https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.ledfx-cache
          mv /tmp/.ledfx-cache-new /tmp/.ledfx-cache
  build_linux:
    name: Build linux Binaries
    needs: prepare_linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: linux
            debian-arch: amd64
          - platform: linux/arm64
            os: linux
            debian-arch: arm64
          - platform: linux/arm/v7
            os: linux
            debian-arch: armhf
          - platform: linux/arm/v6
            os: linux
            debian-arch: armel
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -  
        name: Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.ledfx-cache
          key: ${{ runner.os }}-ledfx-base-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ledfx-base-
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
                ${{ env.GHCR_SLUG }}
          tags: ${{ steps.tags.outputs.result }}
          labels: |
            org.opencontainers.image.title=ledfx
            org.opencontainers.image.vendor=ledfx
      -
        name: Build artifacts
        uses: docker/bake-action@v2
        with:
          targets: artifact
          set: |
            *.platform=${{ matrix.platform }}
#      -
#        name: Move artifacts
#        run: |
#          mv ./dist/**/* ./dist/
      - 
        # Permission Loss https://github.com/actions/upload-artifact#permission-loss
        name: Tar artifacts
        run: tar -cvf LedFx-${{ matrix.os }}-${{ matrix.debian-arch }}-${{ github.sha }}.tar dist/ 
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: LedFx-${{ matrix.os }}-${{ matrix.debian-arch }}-${{ github.sha }}.tar
          path: LedFx-${{ matrix.os }}-${{ matrix.debian-arch }}-${{ github.sha }}.tar
          if-no-files-found: error