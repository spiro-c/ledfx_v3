name: Build LedFx Binary's

on:
  push:
    branches:
      - 'release-workflow'
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'release-workflow'
    paths-ignore:
      - '**.md'
  workflow_dispatch:

#  BINARY_NAME: LedFx-${{ matrix.os }}-${{ matrix.arch }}


jobs:
  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    env:
      CGO_ENABLED: 1
      GHCR_SLUG: ghcr.io/ledfx/ledfx_v3
      PLATFORMS: linux/amd64,linux/arm64
      BINARY_NAME: LedFx-${{ matrix.os }}-${{ matrix.arch }}
    defaults:
      run:
        shell: '${{ matrix.shell }} {0}'
    strategy:
      matrix:
        include:
          - runner: macos-latest
            name: Macos-Build amd64
            shell: bash
            os: darwin
            arch: amd64

          - runner: macos-latest
            name: Macos-Build arm64
            shell: bash
            os: darwin
            arch: arm64

          - runner: ubuntu-latest
            name: Linux-Build amd64
            shell: bash
            platform: linux/amd64
            os: linux
            arch: amd64
            
          - runner: ubuntu-latest
            name: Linux-Build arm64
            shell: bash
            platform: linux/arm64
            os: linux
            arch: arm64
                        
          - runner: ubuntu-latest
            name: Linux-Build armhf
            shell: bash
            platform: linux/arm/v7
            os: linux
            arch: armhf
                    
          - runner: ubuntu-latest
            name: Linux-Build armel
            shell: bash
            platform: linux/arm/v6
            os: linux
            arch: armel
                           
          - runner: windows-latest
            name: Windows-Build AMD64
            shell: msys2
            os: windows
            arch: amd64

    steps:

    - name: Windows Set up Build Environment
      if: matrix.runner == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: |
            git
            make
            unzip
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-go
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-libsamplerate
            mingw-w64-x86_64-python
            mingw-w64-x86_64-waf

    - name: Windows Build Aubio
      if: matrix.runner == 'windows-latest'
      run: |
        git clone https://github.com/aubio/aubio && cd aubio
        curl -o 0001-fix-AUBIO_STRERROR-definition.patch https://raw.githubusercontent.com/msys2/MINGW-packages/master/mingw-w64-aubio/0001-fix-AUBIO_STRERROR-definition.patch
        curl -o 0002-wscript-disable-tests.patch https://raw.githubusercontent.com/msys2/MINGW-packages/master/mingw-w64-aubio/0002-wscript-disable-tests.patch
        patch -p1 -i 0001-fix-AUBIO_STRERROR-definition.patch
        patch -p1 -i 0002-wscript-disable-tests.patch
        waf configure --prefix=${MINGW_PREFIX} --check-c-compiler=gcc --with-target-platform=win64 --enable-fftw3 --disable-docs --disable-tests --notests
        waf build
        waf install
        mv ${MINGW_PREFIX}/lib/*.dll ${MINGW_PREFIX}/bin/
        cd .. && rm -rf aubio

    - name: Windows Build portaudio
      if: matrix.runner == 'windows-latest'
      run: |
        git clone https://github.com/portaudio/portaudio
        cmake -B portaudio/.build -S portaudio -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} -DCMAKE_BUILD_TYPE=Release -DPA_USE_ASIO=on
        cmake --build portaudio/.build/
        cmake --install portaudio/.build/
        rm -rf portaudio

    - name: macOS Install dependencies
      if: matrix.runner == 'macos-latest'
      run: |
        if [ ${{ matrix.arch }} = "arm64" ]; then
          mkdir -p $HOME/arm-target/bin
          mkdir -p $HOME/arm-target/brew-cache
          echo $PWD
          export PATH="$HOME/arm-target/bin:$PATH"

          cd $HOME/arm-target
          mkdir arm-homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C arm-homebrew
          ln -s $HOME/arm-target/arm-homebrew/bin/brew $HOME/arm-target/bin/arm-brew

          export HOMEBREW_CACHE=$HOME/arm-target/brew-cache
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          arm-brew fetch --deps --bottle-tag=arm64_big_sur aubio portaudio libtool |\
            grep -E "(Downloaded to:|Already downloaded:)" |\
            grep -v pkg-config |\
            awk '{ print $3 }' |\
            xargs -n 1 arm-brew install --ignore-dependencies --force-bottle

          # Install host version of pkg-config so we can call it in the build system
          arm-brew install pkg-config
          ln -s $HOME/arm-target/arm-homebrew/bin/pkg-config $HOME/arm-target/bin/arm-pkg-config
        else
          brew install pkg-config
          brew install portaudio
          brew install aubio
        fi

    - name: Set up Go 1.18
      uses: actions/setup-go@v3
      id: go
      with:
        go-version: 1.18

    - name: Set up QEMU
      if: matrix.runner == 'ubuntu-latest'
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      if: matrix.runner == 'ubuntu-latest'
      uses: docker/setup-buildx-action@v2

    # - name: Docker meta
    #   id: meta
    #   uses: docker/metadata-action@v4
    #   with:
    #     images: |
    #           ${{ env.GHCR_SLUG }}
    #     tags: ${{ steps.tags.outputs.result }}
    #     labels: |
    #       org.opencontainers.image.title=ledfx
    #       org.opencontainers.image.vendor=ledfx

    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build Linux artifacts
      if: matrix.runner == 'ubuntu-latest'
      uses: docker/bake-action@v2
      with:
        targets: artifact
        set: |
          *.platform=${{ matrix.platform }}

    - name: Build macOS artifacts
      if: matrix.runner == 'macos-latest'
      run: |
        if [ ${{ matrix.arch }} = "arm64" ]; then
          export PKG_CONFIG_PATH=/Users/runner/arm-target/lib/pkgconfig:$PKG_CONFIG_PATH
          export AUBIO_PATH=/Users/runner/arm-target/Cellar/aubio/0.4.9_3/
          export PATH=/System/Volumes/Data/Users/runner/go/bin:$PATH
          CGO_CFLAGS="-I$AUBIO_PATH/include" CGO_LDFLAGS="-L$AUBIO_PATH/lib" CGO_ENABLED=1 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -tags dynamic -o 'dist/$BINARY_NAME' -v -ldflags="-s -w"
        else
          export PATH=/System/Volumes/Data/Users/runner/go/bin:$PATH
          CGO_ENABLED=1 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -tags dynamic -o 'dist/$BINARY_NAME' -v -ldflags="-s -w"
        fi
    - name: Build Windows artifact
      if: matrix.runner == 'windows-latest'
      run: |
         go build -o 'dist/$BINARY_NAME.exe' -v

    - name: Package Windows artifact
      if: matrix.runner == 'windows-latest'
      run: |
         export CYGPATH=$(cygpath -m /)
         cp $CYGPATH/mingw64/bin/libaubio-5.dll dist/
         cp $CYGPATH/mingw64/bin/libportaudio.dll dist/
         cp $CYGPATH/mingw64/bin/libfftw3f-3.dll dist/
         cp $CYGPATH/mingw64/bin/libFLAC.dll dist/
         cp $CYGPATH/mingw64/bin/libogg-0.dll dist/
         cp $CYGPATH/mingw64/bin/libopus-0.dll dist/
         cp $CYGPATH/mingw64/bin/libsamplerate-0.dll dist/
         cp $CYGPATH/mingw64/bin/libsndfile-1.dll dist/
         cp $CYGPATH/mingw64/bin/libssp-0.dll dist/
         cp $CYGPATH/mingw64/bin/libvorbis-0.dll dist/
         cp $CYGPATH/mingw64/bin/libvorbisenc-2.dll dist/
         cp $CYGPATH/mingw64/bin/libwinpthread-1.dll dist/

      # Permission Loss https://github.com/actions/upload-artifact#permission-loss
    - name: Tar artifacts
      run: tar -cvf ${{ env.BINARY_NAME }}-${{ github.sha }}.tar dist/

    - name: Write Env On Windows
      run: |
        env
        printenv > $BINARY_NAME

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-${{ github.sha }}.tar
        path: ${{ env.BINARY_NAME }}-${{ github.sha }}.tar